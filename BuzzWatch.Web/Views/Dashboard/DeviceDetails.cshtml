@model BuzzWatch.Web.Models.DeviceDetailViewModel
@{
    ViewData["Title"] = $"Device - {Model.Device.Name}";
}

<div class="container mx-auto px-4 py-6 dark:bg-gray-900">
    <div class="mb-6">
        <a href="@Url.Action("Index")" class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300">
            <i class="bi bi-arrow-left"></i> Back to Dashboard
        </a>
    </div>

    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden border border-gray-200 dark:border-gray-700 mb-6">
        <div class="bg-gradient-to-r from-blue-600 to-indigo-700 dark:from-blue-800 dark:to-indigo-900 p-6 text-white">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-3xl font-bold">@Model.Device.Name</h1>
                    <p class="text-blue-100">@Model.Device.Location</p>
                    <p class="text-sm text-blue-100 mt-1">Device ID: @Model.Device.Id</p>
                </div>
                @{
                    var statusClass = Model.Device.Status == "Online" 
                        ? "bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100" 
                        : "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-100";
                }
                <div class="text-center">
                    <span class="px-4 py-2 rounded-full text-sm font-medium @statusClass">
                        @Model.Device.Status
                    </span>
                    <div class="text-sm mt-2 text-blue-100">Last Updated</div>
                    <div class="text-blue-50">@Model.Device.LastSeen.ToString("g")</div>
                </div>
            </div>
        </div>

        <div class="p-6 dark:bg-gray-800">
            <!-- Metrics Dashboard -->
            <div class="grid grid-cols-2 md:grid-cols-4 gap-6 mb-8">
                <div class="bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900 dark:to-blue-800 p-5 rounded-xl shadow-sm border border-blue-200 dark:border-blue-700">
                    <div class="flex items-center justify-between">
                        <div class="text-blue-800 dark:text-blue-300 opacity-70"><i class="bi bi-thermometer-half text-2xl"></i></div>
                        <div class="bg-white dark:bg-gray-700 rounded-lg py-1 px-2 text-xs font-medium text-blue-600 dark:text-blue-300">Temperature</div>
                    </div>
                    <div class="text-3xl font-bold text-gray-800 dark:text-white mt-2" data-metric="temperature">@(Model.LatestTemperature?.ToString("F1") ?? "--") °C</div>
                    <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                        Range: @(Model.TemperatureMin?.ToString("F1") ?? "--") - @(Model.TemperatureMax?.ToString("F1") ?? "--") °C
                    </div>
                </div>
                
                <div class="bg-gradient-to-br from-teal-50 to-teal-100 dark:from-teal-900 dark:to-teal-800 p-5 rounded-xl shadow-sm border border-teal-200 dark:border-teal-700">
                    <div class="flex items-center justify-between">
                        <div class="text-teal-800 dark:text-teal-300 opacity-70"><i class="bi bi-droplet-half text-2xl"></i></div>
                        <div class="bg-white dark:bg-gray-700 rounded-lg py-1 px-2 text-xs font-medium text-teal-600 dark:text-teal-300">Humidity</div>
                    </div>
                    <div class="text-3xl font-bold text-gray-800 dark:text-white mt-2" data-metric="humidity">@(Model.LatestHumidity?.ToString("F1") ?? "--") %</div>
                    <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                        Range: @(Model.HumidityMin?.ToString("F1") ?? "--") - @(Model.HumidityMax?.ToString("F1") ?? "--") %
                    </div>
                </div>
                
                <div class="bg-gradient-to-br from-amber-50 to-amber-100 dark:from-amber-900 dark:to-amber-800 p-5 rounded-xl shadow-sm border border-amber-200 dark:border-amber-700">
                    <div class="flex items-center justify-between">
                        <div class="text-amber-800 dark:text-amber-300 opacity-70"><i class="bi bi-speedometer2 text-2xl"></i></div>
                        <div class="bg-white dark:bg-gray-700 rounded-lg py-1 px-2 text-xs font-medium text-amber-600 dark:text-amber-300">Weight</div>
                    </div>
                    <div class="text-3xl font-bold text-gray-800 dark:text-white mt-2" data-metric="weight">@(Model.LatestWeight?.ToString("F1") ?? "--") kg</div>
                    <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                        Change: @(Model.WeightChange24h?.ToString("+0.0;-0.0;0") ?? "--") kg (24h)
                    </div>
                </div>
                
                <div class="bg-gradient-to-br from-indigo-50 to-indigo-100 dark:from-indigo-900 dark:to-indigo-800 p-5 rounded-xl shadow-sm border border-indigo-200 dark:border-indigo-700">
                    <div class="flex items-center justify-between">
                        <div class="text-indigo-800 dark:text-indigo-300 opacity-70"><i class="bi bi-battery-half text-2xl"></i></div>
                        <div class="bg-white dark:bg-gray-700 rounded-lg py-1 px-2 text-xs font-medium text-indigo-600 dark:text-indigo-300">Battery</div>
                    </div>
                    <div class="text-3xl font-bold text-gray-800 dark:text-white mt-2" data-metric="battery">@(Model.LatestBatteryLevel?.ToString("F1") ?? "--") %</div>
                    <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                        @{
                            var batteryStatus = Model.LatestBatteryLevel > 70 ? "Good" : 
                                               Model.LatestBatteryLevel > 30 ? "Average" : "Low";
                        }
                        Status: @batteryStatus
                    </div>
                </div>
            </div>

            <!-- Measurement Charts -->
            <div class="mb-8">
                <div class="mb-4 flex flex-col md:flex-row justify-between items-center">
                    <h2 class="text-xl font-semibold dark:text-white">Measurement History</h2>
                    
                    <div class="mt-2 md:mt-0 flex items-center space-x-1">
                        <div class="mr-2 text-sm text-gray-600 dark:text-gray-300">Chart Type:</div>
                        <div class="flex border border-gray-300 dark:border-gray-600 rounded-md overflow-hidden">
                            <button class="chart-type-btn active px-3 py-1 text-sm bg-blue-50 dark:bg-blue-900 dark:text-white" data-type="line">
                                <i class="bi bi-graph-up"></i>
                            </button>
                            <button class="chart-type-btn px-3 py-1 text-sm bg-white dark:bg-gray-700 dark:text-gray-300" data-type="bar">
                                <i class="bi bi-bar-chart"></i>
                            </button>
                            <button class="chart-type-btn px-3 py-1 text-sm bg-white dark:bg-gray-700 dark:text-gray-300" data-type="radar">
                                <i class="bi bi-reception-4"></i>
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="p-4 bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg shadow-sm mb-6">
                    <div class="flex flex-wrap justify-between items-center mb-4">
                        <div class="flex items-center space-x-2">
                            <div class="w-3 h-3 rounded-full bg-red-500"></div>
                            <h3 class="text-lg font-medium dark:text-white">Temperature</h3>
                        </div>
                        
                        <div class="flex flex-wrap gap-1 mt-2 md:mt-0">
                            <button class="time-range-btn active px-3 py-1 text-xs font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md" data-range="1h">1h</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md" data-range="3h">3h</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md" data-range="24h">24h</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md" data-range="7d">7d</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md" data-range="30d">30d</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md" data-range="est">est</button>
                        </div>
                    </div>
                    <div class="h-64">
                        <canvas id="temperatureChart"></canvas>
                    </div>
                </div>
                
                <div class="p-4 bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg shadow-sm mb-6">
                    <div class="flex flex-wrap justify-between items-center mb-4">
                        <div class="flex items-center space-x-2">
                            <div class="w-3 h-3 rounded-full bg-blue-500"></div>
                            <h3 class="text-lg font-medium dark:text-white">Humidity</h3>
                        </div>
                        
                        <div class="flex flex-wrap gap-1 mt-2 md:mt-0">
                            <button class="time-range-btn active px-3 py-1 text-xs font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md" data-range="1h">1h</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md" data-range="3h">3h</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md" data-range="24h">24h</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md" data-range="7d">7d</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md" data-range="30d">30d</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md" data-range="est">est</button>
                        </div>
                    </div>
                    <div class="h-64">
                        <canvas id="humidityChart"></canvas>
                    </div>
                </div>
                
                <div class="p-4 bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg shadow-sm">
                    <div class="flex flex-wrap justify-between items-center mb-4">
                        <div class="flex items-center space-x-2">
                            <div class="w-3 h-3 rounded-full bg-amber-500"></div>
                            <h3 class="text-lg font-medium dark:text-white">Weight</h3>
                        </div>
                        
                        <div class="flex flex-wrap gap-1 mt-2 md:mt-0">
                            <button class="time-range-btn active px-3 py-1 text-xs font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md" data-range="1h">1h</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md" data-range="3h">3h</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md" data-range="24h">24h</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md" data-range="7d">7d</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md" data-range="30d">30d</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md" data-range="est">est</button>
                        </div>
                    </div>
                    <div class="h-64">
                        <canvas id="weightChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Alerts Section -->
            <div class="mb-8">
                <h2 class="text-xl font-semibold mb-4 dark:text-white">Alerts</h2>
                @if (Model.Alerts.Any())
                {
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        @foreach (var alert in Model.Alerts.OrderByDescending(a => a.Timestamp).Take(4))
                        {
                            var alertClass = alert.Severity == "High" ? "border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900" : 
                                            alert.Severity == "Medium" ? "border-yellow-300 bg-yellow-50 dark:border-yellow-700 dark:bg-yellow-900" : 
                                            "border-blue-300 bg-blue-50 dark:border-blue-700 dark:bg-blue-900";
                            
                            var iconClass = alert.Severity == "High" ? "text-red-500 dark:text-red-400 bi-exclamation-triangle-fill" : 
                                           alert.Severity == "Medium" ? "text-yellow-500 dark:text-yellow-400 bi-exclamation-circle" : 
                                           "text-blue-500 dark:text-blue-400 bi-info-circle";
                            
                            <div class="p-4 rounded-lg border @alertClass">
                                <div class="flex items-start">
                                    <div class="mr-3 text-xl">
                                        <i class="bi @iconClass"></i>
                                    </div>
                                    <div>
                                        <div class="font-medium dark:text-white">@alert.Message</div>
                                        <div class="text-sm text-gray-600 dark:text-gray-300 mt-1 flex justify-between">
                                            <span>Status: @alert.Status</span>
                                            <span>@alert.Timestamp.ToString("g")</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    @if (Model.Alerts.Count > 4)
                    {
                        <div class="mt-4 text-center">
                            <a href="#" class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 text-sm inline-flex items-center">
                                View all @Model.Alerts.Count alerts
                                <i class="bi bi-arrow-right ml-1"></i>
                            </a>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center p-8 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600">
                        <i class="bi bi-shield-check text-5xl text-green-500 dark:text-green-400"></i>
                        <p class="mt-3 text-gray-600 dark:text-gray-300">No alerts for this device.</p>
                    </div>
                }
            </div>

            <!-- Device Information -->
            <div class="mb-8">
                <h2 class="text-xl font-semibold mb-4 dark:text-white">Device Information</h2>
                <div class="bg-white dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600 overflow-hidden shadow-sm">
                    <div class="grid grid-cols-1 md:grid-cols-2 divide-y md:divide-y-0 md:divide-x divide-gray-200 dark:divide-gray-600">
                        <div class="p-5">
                            <h3 class="text-lg font-medium mb-3 dark:text-white">Hardware Details</h3>
                            <div class="space-y-4">
                                <div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">Device Type</div>
                                    <div class="font-medium dark:text-white">@Model.Device.Type</div>
                                </div>
                                <div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">Firmware Version</div>
                                    <div class="font-medium dark:text-white">@Model.Device.FirmwareVersion</div>
                                </div>
                                <div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">Installed On</div>
                                    <div class="font-medium dark:text-white">@(Model.Device.InstalledOn.HasValue ? Model.Device.InstalledOn.Value.ToString("d") : "N/A")</div>
                                </div>
                            </div>
                        </div>
                        <div class="p-5">
                            <h3 class="text-lg font-medium mb-3 dark:text-white">Connectivity</h3>
                            <div class="space-y-4">
                                <div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">Signal Strength</div>
                                    <div class="font-medium dark:text-white">Excellent</div>
                                </div>
                                <div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">Last Communication</div>
                                    <div class="font-medium dark:text-white">@Model.Device.LastSeen.ToString("g")</div>
                                </div>
                                <div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">Uptime</div>
                                    <div class="font-medium dark:text-white">98.5%</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Data Export -->
            <div>
                <h2 class="text-xl font-semibold mb-4 dark:text-white">Export Data</h2>
                <div class="bg-white dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600 p-5 shadow-sm">
                    <div class="mb-4">
                        <p class="text-gray-600 dark:text-gray-300">Download device measurements for analysis or backup in your preferred format.</p>
                    </div>
                    
                    <form id="exportForm" class="space-y-4">
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                                <label for="exportFormat" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Format</label>
                                <select id="exportFormat" class="block w-full px-3 py-2 bg-white dark:bg-gray-800 dark:text-white border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                                    <option value="csv">CSV</option>
                                    <option value="excel">Excel</option>
                                    <option value="json">JSON</option>
                                </select>
                            </div>
                            
                            <div>
                                <label for="exportTimeRange" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Time Range</label>
                                <select id="exportTimeRange" class="block w-full px-3 py-2 bg-white dark:bg-gray-800 dark:text-white border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                                    <option value="7">Last 7 days</option>
                                    <option value="30" selected>Last 30 days</option>
                                    <option value="90">Last 90 days</option>
                                    <option value="365">Last year</option>
                                </select>
                            </div>
                            
                            <div class="flex items-end">
                                <button type="button" id="exportButton" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 dark:bg-indigo-700 dark:hover:bg-indigo-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <i class="bi bi-download mr-2"></i> Export Data
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/chart.js/chart.umd.js"></script>
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Check if dark mode is enabled
            const isDarkMode = document.documentElement.classList.contains('dark') || 
                               window.matchMedia('(prefers-color-scheme: dark)').matches;
            
            // Format chart data
            const timestamps = @Html.Raw(Json.Serialize(Model.ChartLabels));
            const temperatures = @Html.Raw(Json.Serialize(Model.TemperatureData));
            const humidities = @Html.Raw(Json.Serialize(Model.HumidityData));
            const weights = @Html.Raw(Json.Serialize(Model.WeightData));
            
            // Chart configuration objects
            const chartColors = {
                temperature: {
                    border: isDarkMode ? 'rgb(248, 113, 113)' : 'rgb(239, 68, 68)',
                    background: isDarkMode ? 'rgba(248, 113, 113, 0.2)' : 'rgba(239, 68, 68, 0.1)'
                },
                humidity: {
                    border: isDarkMode ? 'rgb(96, 165, 250)' : 'rgb(59, 130, 246)',
                    background: isDarkMode ? 'rgba(96, 165, 250, 0.2)' : 'rgba(59, 130, 246, 0.1)'
                },
                weight: {
                    border: isDarkMode ? 'rgb(251, 191, 36)' : 'rgb(245, 158, 11)',
                    background: isDarkMode ? 'rgba(251, 191, 36, 0.2)' : 'rgba(245, 158, 11, 0.1)'
                },
                forecast: {
                    border: isDarkMode ? 'rgba(156, 163, 175, 0.8)' : 'rgba(107, 114, 128, 0.8)',
                    background: isDarkMode ? 'rgba(156, 163, 175, 0.2)' : 'rgba(107, 114, 128, 0.1)'
                }
            };

            // Set Chart.js defaults for dark mode
            if (isDarkMode) {
                Chart.defaults.color = '#D1D5DB'; // text color
                Chart.defaults.borderColor = '#4B5563'; // grid lines
                Chart.defaults.backgroundColor = '#374151';
            }

            // Create Temperature Chart
            const temperatureCtx = document.getElementById('temperatureChart').getContext('2d');
            const temperatureChart = new Chart(temperatureCtx, {
                type: 'line',
                data: {
                    labels: timestamps,
                    datasets: [{
                        label: 'Temperature (°C)',
                        data: temperatures,
                        borderColor: chartColors.temperature.border,
                        backgroundColor: chartColors.temperature.background,
                        borderWidth: 2,
                        tension: 0.3,
                        pointRadius: 3
                    }]
                },
                options: getChartOptions('Temperature (°C)')
            });
            
            // Create Humidity Chart
            const humidityCtx = document.getElementById('humidityChart').getContext('2d');
            const humidityChart = new Chart(humidityCtx, {
                type: 'line',
                data: {
                    labels: timestamps,
                    datasets: [{
                        label: 'Humidity (%)',
                        data: humidities,
                        borderColor: chartColors.humidity.border,
                        backgroundColor: chartColors.humidity.background,
                        borderWidth: 2,
                        tension: 0.3,
                        pointRadius: 3
                    }]
                },
                options: getChartOptions('Humidity (%)')
            });
            
            // Create Weight Chart
            const weightCtx = document.getElementById('weightChart').getContext('2d');
            const weightChart = new Chart(weightCtx, {
                type: 'line',
                data: {
                    labels: timestamps,
                    datasets: [{
                        label: 'Weight (kg)',
                        data: weights,
                        borderColor: chartColors.weight.border,
                        backgroundColor: chartColors.weight.background,
                        borderWidth: 2,
                        tension: 0.3,
                        pointRadius: 3
                    }]
                },
                options: getChartOptions('Weight (kg)')
            });
            
            // Chart options helper function
            function getChartOptions(yAxisTitle) {
                return {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            padding: 10,
                            backgroundColor: isDarkMode ? 'rgba(0, 0, 0, 0.8)' : 'rgba(0, 0, 0, 0.7)',
                            titleFont: {
                                size: 14
                            },
                            bodyFont: {
                                size: 13
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            }
                        },
                        y: {
                            beginAtZero: false,
                            title: {
                                display: true,
                                text: yAxisTitle,
                                font: {
                                    size: 12,
                                    weight: 'normal'
                                }
                            },
                            ticks: {
                                precision: 1
                            }
                        }
                    }
                };
            }
            
            // Chart type buttons
            const chartTypeBtns = document.querySelectorAll('.chart-type-btn');
            chartTypeBtns.forEach(btn => {
                btn.addEventListener('click', () => {
                    // Update active class
                    chartTypeBtns.forEach(b => {
                        b.classList.remove('active');
                        b.classList.remove('bg-blue-50', 'dark:bg-blue-900');
                        b.classList.add('bg-white', 'dark:bg-gray-700');
                    });
                    btn.classList.add('active');
                    btn.classList.add('bg-blue-50', 'dark:bg-blue-900');
                    btn.classList.remove('bg-white', 'dark:bg-gray-700');
                    
                    // Change chart type
                    const chartType = btn.getAttribute('data-type');
                    updateChartType(temperatureChart, chartType);
                    updateChartType(humidityChart, chartType);
                    updateChartType(weightChart, chartType);
                });
            });
            
            function updateChartType(chart, newType) {
                // Save current datasets and options
                const data = chart.data;
                const options = chart.options;
                
                // Destroy current chart
                chart.destroy();
                
                // Create new chart with the new type
                chart.type = newType;
                chart.data = data;
                chart.options = options;
                
                // If radar type, make special adjustments
                if (newType === 'radar') {
                    // Simplify data for radar chart to be more meaningful
                    // For example, show only every 4th data point
                    const simplifiedData = [];
                    const simplifiedLabels = [];
                    for (let i = 0; i < data.labels.length; i += 4) {
                        simplifiedLabels.push(data.labels[i]);
                        simplifiedData.push(data.datasets[0].data[i]);
                    }
                    
                    chart.data.labels = simplifiedLabels;
                    chart.data.datasets[0].data = simplifiedData;
                    
                    // Update radar-specific options
                    chart.options.scales = {}; // Remove regular scales
                    chart.options.elements = {
                        line: {
                            tension: 0.2
                        }
                    };
                    chart.options.plugins.legend.display = true;
                }
                
                // Update chart
                chart.update();
            }
            
            // Time range buttons
            const timeRangeBtns = document.querySelectorAll('.time-range-btn');
            
            // Define time ranges in hours
            const timeRanges = {
                '1h': 1,
                '3h': 3,
                '24h': 24,
                '7d': 24 * 7,
                '30d': 24 * 30,
                'est': 'forecast' // Special case for estimate/forecast
            };
            
            timeRangeBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    // Get parent chart container
                    const chartContainer = this.closest('.p-4').querySelector('canvas');
                    const chartId = chartContainer.id;
                    
                    // Update active class only within this chart section
                    const siblingBtns = this.closest('.flex').querySelectorAll('.time-range-btn');
                    siblingBtns.forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Get the time range
                    const range = this.getAttribute('data-range');
                    
                    // Call function to update chart with new time range
                    updateChartTimeRange(chartId, range);
                });
            });
            
            function updateChartTimeRange(chartId, rangeKey) {
                // Determine which chart to update
                let chart, dataSet;
                
                if (chartId === 'temperatureChart') {
                    chart = temperatureChart;
                    dataSet = temperatures;
                } else if (chartId === 'humidityChart') {
                    chart = humidityChart;
                    dataSet = humidities;
                } else if (chartId === 'weightChart') {
                    chart = weightChart;
                    dataSet = weights;
                }
                
                if (!chart) return;
                
                // Special case for forecast
                if (rangeKey === 'est') {
                    // Show existing data plus forecast data (could be from Model.TemperaturePredictions)
                    // For demo, we'll just add some extrapolated values
                    const existingData = [...dataSet];
                    const forecastData = [...existingData];
                    
                    // Generate some future dates
                    const existingLabels = [...timestamps];
                    const forecastLabels = [];
                    
                    // Create 5 future data points
                    for (let i = 1; i <= 5; i++) {
                        const lastValue = existingData[existingData.length - 1] || 0;
                        const randomChange = (Math.random() - 0.5) * 2; // Random variance
                        forecastData.push(lastValue + randomChange);
                        
                        // Generate future date label
                        const lastDate = new Date();
                        lastDate.setHours(lastDate.getHours() + i);
                        forecastLabels.push(lastDate.toLocaleDateString('en-US', { 
                            month: '2-digit', 
                            day: '2-digit', 
                            hour: '2-digit', 
                            minute: '2-digit'
                        }));
                    }
                    
                    // Update chart with forecast data
                    chart.data.labels = [...existingLabels, ...forecastLabels];
                    chart.data.datasets = [
                        {
                            ...chart.data.datasets[0],
                            data: existingData
                        },
                        {
                            label: 'Forecast',
                            data: Array(existingData.length).fill(null).concat(forecastData.slice(-5)),
                            borderColor: chartColors.forecast.border,
                            backgroundColor: chartColors.forecast.background,
                            borderWidth: 2,
                            borderDash: [5, 5],
                            tension: 0.3,
                            pointRadius: 3
                        }
                    ];
                    
                    chart.update();
                    return;
                }
                
                // For regular time ranges
                const hoursToShow = timeRanges[rangeKey];
                if (!hoursToShow) return;
                
                // For demo, filter based on the length of the array
                // In a real app, you'd filter by actual timestamp values
                const dataLength = dataSet.length;
                const pointsToShow = Math.min(dataLength, Math.ceil(dataLength * (hoursToShow / 24)));
                
                // Slice the data to show only the relevant time range
                const filteredLabels = timestamps.slice(-pointsToShow);
                const filteredData = dataSet.slice(-pointsToShow);
                
                // Update chart
                chart.data.labels = filteredLabels;
                chart.data.datasets[0].data = filteredData;
                chart.update();
            }
            
            // Initialize export button
            document.getElementById('exportButton').addEventListener('click', function() {
                const format = document.getElementById('exportFormat').value;
                const days = document.getElementById('exportTimeRange').value;
                
                window.location.href = `/Dashboard/ExportDeviceData?id=${@Model.Device.Id}&format=${format}&days=${days}`;
            });
            
            // Set up real-time updates if available
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/hubs/devices")
                .withAutomaticReconnect()
                .build();
                
            connection.on("ReceiveMeasurement", function(deviceId, measurement) {
                if (deviceId === "@Model.Device.Id") {
                    // Update charts with new data
                    updateChartsWithNewData(measurement);
                    
                    // Update metrics display
                    updateMetricsDisplay(measurement);
                }
            });
            
            function updateChartsWithNewData(measurement) {
                // Format timestamp
                const timestamp = new Date(measurement.timestamp).toLocaleString();
                
                // Add new data to temperature chart
                if (measurement.temperature !== null && temperatureChart) {
                    temperatureChart.data.labels.push(timestamp);
                    temperatureChart.data.datasets[0].data.push(measurement.temperature);
                    temperatureChart.update();
                }
                
                // Add new data to humidity chart
                if (measurement.humidity !== null && humidityChart) {
                    humidityChart.data.labels.push(timestamp);
                    humidityChart.data.datasets[0].data.push(measurement.humidity);
                    humidityChart.update();
                }
                
                // Add new data to weight chart
                if (measurement.weight !== null && weightChart) {
                    weightChart.data.labels.push(timestamp);
                    weightChart.data.datasets[0].data.push(measurement.weight);
                    weightChart.update();
                }
            }
            
            function updateMetricsDisplay(measurement) {
                // Update displayed metrics with new values
                if (measurement.temperature !== null) {
                    document.querySelector('[data-metric="temperature"]').textContent = 
                        `${measurement.temperature.toFixed(1)} °C`;
                }
                
                if (measurement.humidity !== null) {
                    document.querySelector('[data-metric="humidity"]').textContent = 
                        `${measurement.humidity.toFixed(1)} %`;
                }
                
                if (measurement.weight !== null) {
                    document.querySelector('[data-metric="weight"]').textContent = 
                        `${measurement.weight.toFixed(1)} kg`;
                }
                
                if (measurement.batteryLevel !== null) {
                    document.querySelector('[data-metric="battery"]').textContent = 
                        `${measurement.batteryLevel.toFixed(1)} %`;
                }
            }
            
            // Dark mode toggle listener (if you have a toggle button)
            document.addEventListener('colorSchemeChange', function() {
                // Refresh or update charts for the new mode
                location.reload();
            });
            
            // Start the connection
            try {
                connection.start();
                console.log("SignalR Connected");
            } catch (err) {
                console.error(err);
            }
        });
    </script>
} 