@model BuzzWatch.Web.Models.DeviceDetailViewModel
@{
    ViewData["Title"] = $"Device - {Model.Device.Name}";
}

<div class="container mx-auto px-4 py-6 dark:bg-gray-900">
    <div class="mb-6">
        <a href="@Url.Action("Index")" class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 flex items-center">
            <i class="bi bi-arrow-left mr-1"></i> Back to Dashboard
        </a>
    </div>

    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden border border-gray-200 dark:border-gray-700 mb-6">
        <!-- Device Header -->
        <div class="bg-gradient-to-r from-blue-600 to-indigo-700 dark:from-blue-800 dark:to-indigo-900 p-6 text-white">
            <div class="flex flex-col md:flex-row justify-between items-start md:items-center">
                <div>
                    <h1 class="text-3xl font-bold">@Model.Device.Name</h1>
                    <p class="text-blue-100 mt-1">@Model.Device.Location</p>
                    <p class="text-sm text-blue-200 mt-1">Device ID: @Model.Device.Id</p>
                </div>
                @{
                    var statusClass = Model.Device.Status == "Online" 
                        ? "bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100" 
                        : "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-100";
                }
                <div class="mt-4 md:mt-0 text-center">
                    <span class="px-4 py-2 rounded-full text-sm font-medium shadow-sm @statusClass">
                        <i class="bi bi-circle-fill text-xs mr-1 @(Model.Device.Status == "Online" ? "text-green-500" : "text-gray-500")"></i>
                        @Model.Device.Status
                    </span>
                    <div class="text-sm mt-2 text-blue-100">Last Updated</div>
                    <div class="text-blue-50">@Model.Device.LastSeen.ToString("g")</div>
                </div>
            </div>
            
            @if(Model.CanManage)
            {
                <div class="mt-6 flex flex-wrap gap-2 border-t border-blue-400/30 pt-4">
                    <button type="button" class="bg-white/20 hover:bg-white/30 text-white px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200" 
                            data-bs-toggle="modal" data-bs-target="#editDeviceModal">
                        <i class="bi bi-pencil-square mr-1"></i> Edit Device
                    </button>
                    <button type="button" class="bg-white/20 hover:bg-white/30 text-white px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200"
                            data-bs-toggle="modal" data-bs-target="#apiKeyModal">
                        <i class="bi bi-key mr-1"></i> Manage API Key
                    </button>
                </div>
            }
        </div>

        <div class="p-6 bg-gray-50 dark:bg-gray-800">
            <!-- Enhanced Metrics Dashboard -->
            <h2 class="text-2xl font-bold mb-6 text-gray-800 dark:text-white">
                <i class="bi bi-card-list mr-2"></i>Hive Measurements
            </h2>
            
            <!-- Inside Measurements -->
            <div class="mb-8">
                <h3 class="text-xl font-semibold mb-4 text-gray-700 dark:text-gray-200 flex items-center">
                    <i class="bi bi-house-fill mr-2"></i> Inside Hive
                </h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Inside Temperature -->
                    <div class="bg-gradient-to-br from-red-50 to-red-100 dark:from-red-900/30 dark:to-red-800/30 p-6 rounded-xl shadow-sm border border-red-200 dark:border-red-700 hover:shadow-md transition-all duration-300">
                        <div class="flex items-center justify-between mb-3">
                            <div class="text-red-600 dark:text-red-300">
                                <i class="bi bi-thermometer-high text-3xl"></i>
                            </div>
                            <div class="bg-white dark:bg-gray-700 rounded-lg py-1 px-3 text-sm font-medium text-red-600 dark:text-red-400 shadow-sm">
                                Inside Temperature
                            </div>
                        </div>
                        <div class="flex items-end mt-1">
                            <div class="text-5xl font-bold text-gray-800 dark:text-white" data-metric="tempInside">
                                @(Model.LatestTemperature?.ToString("F1") ?? "--")
                            </div>
                            <div class="text-2xl ml-1 mb-1 font-medium text-gray-600 dark:text-gray-400">°C</div>
                        </div>
                        <div class="mt-4 grid grid-cols-2 gap-3 text-sm">
                            <div class="text-gray-600 dark:text-gray-400 bg-white/50 dark:bg-gray-700/50 rounded-lg p-2">
                                <span class="font-medium text-gray-700 dark:text-gray-300">Min:</span><br /> 
                                <span class="text-gray-800 dark:text-gray-200">@(Model.TemperatureMin?.ToString("F1") ?? "--") °C</span>
                            </div>
                            <div class="text-gray-600 dark:text-gray-400 bg-white/50 dark:bg-gray-700/50 rounded-lg p-2">
                                <span class="font-medium text-gray-700 dark:text-gray-300">Max:</span><br /> 
                                <span class="text-gray-800 dark:text-gray-200">@(Model.TemperatureMax?.ToString("F1") ?? "--") °C</span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Inside Humidity -->
                    <div class="bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/30 dark:to-blue-800/30 p-6 rounded-xl shadow-sm border border-blue-200 dark:border-blue-700 hover:shadow-md transition-all duration-300">
                        <div class="flex items-center justify-between mb-3">
                            <div class="text-blue-600 dark:text-blue-300">
                                <i class="bi bi-droplet-fill text-3xl"></i>
                            </div>
                            <div class="bg-white dark:bg-gray-700 rounded-lg py-1 px-3 text-sm font-medium text-blue-600 dark:text-blue-400 shadow-sm">
                                Inside Humidity
                            </div>
                        </div>
                        <div class="flex items-end mt-1">
                            <div class="text-5xl font-bold text-gray-800 dark:text-white" data-metric="humInside">
                                @(Model.LatestHumidity?.ToString("F1") ?? "--")
                            </div>
                            <div class="text-2xl ml-1 mb-1 font-medium text-gray-600 dark:text-gray-400">%</div>
                        </div>
                        <div class="mt-4 grid grid-cols-2 gap-3 text-sm">
                            <div class="text-gray-600 dark:text-gray-400 bg-white/50 dark:bg-gray-700/50 rounded-lg p-2">
                                <span class="font-medium text-gray-700 dark:text-gray-300">Min:</span><br /> 
                                <span class="text-gray-800 dark:text-gray-200">@(Model.HumidityMin?.ToString("F1") ?? "--") %</span>
                            </div>
                            <div class="text-gray-600 dark:text-gray-400 bg-white/50 dark:bg-gray-700/50 rounded-lg p-2">
                                <span class="font-medium text-gray-700 dark:text-gray-300">Max:</span><br /> 
                                <span class="text-gray-800 dark:text-gray-200">@(Model.HumidityMax?.ToString("F1") ?? "--") %</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Outside Measurements -->
            <div class="mb-8">
                <h3 class="text-xl font-semibold mb-4 text-gray-700 dark:text-gray-200 flex items-center">
                    <i class="bi bi-cloud-sun-fill mr-2"></i> Outside Environment
                </h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Outside Temperature -->
                    <div class="bg-gradient-to-br from-amber-50 to-amber-100 dark:from-amber-900/30 dark:to-amber-800/30 p-6 rounded-xl shadow-sm border border-amber-200 dark:border-amber-700 hover:shadow-md transition-all duration-300">
                        <div class="flex items-center justify-between mb-3">
                            <div class="text-amber-600 dark:text-amber-300">
                                <i class="bi bi-thermometer-sun text-3xl"></i>
                            </div>
                            <div class="bg-white dark:bg-gray-700 rounded-lg py-1 px-3 text-sm font-medium text-amber-600 dark:text-amber-400 shadow-sm">
                                Outside Temperature
                            </div>
                        </div>
                        <div class="flex items-end mt-1">
                            <div class="text-5xl font-bold text-gray-800 dark:text-white" data-metric="tempOutside">
                                @(Model.LatestTemperature?.ToString("F1") ?? "--")
                            </div>
                            <div class="text-2xl ml-1 mb-1 font-medium text-gray-600 dark:text-gray-400">°C</div>
                        </div>
                        <div class="mt-4 grid grid-cols-2 gap-3 text-sm">
                            <div class="text-gray-600 dark:text-gray-400 bg-white/50 dark:bg-gray-700/50 rounded-lg p-2">
                                <span class="font-medium text-gray-700 dark:text-gray-300">Min:</span><br />
                                <span class="text-gray-800 dark:text-gray-200">@(Model.TemperatureMin?.ToString("F1") ?? "--") °C</span>
                            </div>
                            <div class="text-gray-600 dark:text-gray-400 bg-white/50 dark:bg-gray-700/50 rounded-lg p-2">
                                <span class="font-medium text-gray-700 dark:text-gray-300">Max:</span><br />
                                <span class="text-gray-800 dark:text-gray-200">@(Model.TemperatureMax?.ToString("F1") ?? "--") °C</span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Outside Humidity -->
                    <div class="bg-gradient-to-br from-teal-50 to-teal-100 dark:from-teal-900/30 dark:to-teal-800/30 p-6 rounded-xl shadow-sm border border-teal-200 dark:border-teal-700 hover:shadow-md transition-all duration-300">
                        <div class="flex items-center justify-between mb-3">
                            <div class="text-teal-600 dark:text-teal-300">
                                <i class="bi bi-moisture text-3xl"></i>
                            </div>
                            <div class="bg-white dark:bg-gray-700 rounded-lg py-1 px-3 text-sm font-medium text-teal-600 dark:text-teal-400 shadow-sm">
                                Outside Humidity
                            </div>
                        </div>
                        <div class="flex items-end mt-1">
                            <div class="text-5xl font-bold text-gray-800 dark:text-white" data-metric="humOutside">
                                @(Model.LatestHumidity?.ToString("F1") ?? "--")
                            </div>
                            <div class="text-2xl ml-1 mb-1 font-medium text-gray-600 dark:text-gray-400">%</div>
                        </div>
                        <div class="mt-4 grid grid-cols-2 gap-3 text-sm">
                            <div class="text-gray-600 dark:text-gray-400 bg-white/50 dark:bg-gray-700/50 rounded-lg p-2">
                                <span class="font-medium text-gray-700 dark:text-gray-300">Min:</span><br />
                                <span class="text-gray-800 dark:text-gray-200">@(Model.HumidityMin?.ToString("F1") ?? "--") %</span>
                            </div>
                            <div class="text-gray-600 dark:text-gray-400 bg-white/50 dark:bg-gray-700/50 rounded-lg p-2">
                                <span class="font-medium text-gray-700 dark:text-gray-300">Max:</span><br />
                                <span class="text-gray-800 dark:text-gray-200">@(Model.HumidityMax?.ToString("F1") ?? "--") %</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Weight Measurement -->
            <div class="mb-8">
                <h3 class="text-xl font-semibold mb-4 text-gray-700 dark:text-gray-200 flex items-center">
                    <i class="bi bi-speedometer mr-2"></i> Hive Weight
                </h3>
                <div class="bg-gradient-to-br from-yellow-50 to-yellow-100 dark:from-yellow-900/30 dark:to-yellow-800/30 p-6 rounded-xl shadow-sm border border-yellow-200 dark:border-yellow-700 hover:shadow-md transition-all duration-300">
                    <div class="flex items-center justify-between mb-3">
                        <div class="text-yellow-600 dark:text-yellow-300">
                            <i class="bi bi-speedometer2 text-3xl"></i>
                        </div>
                        <div class="bg-white dark:bg-gray-700 rounded-lg py-1 px-3 text-sm font-medium text-yellow-600 dark:text-yellow-400 shadow-sm">
                            Hive Weight
                        </div>
                    </div>
                    <div class="flex items-end mt-1">
                        <div class="text-5xl font-bold text-gray-800 dark:text-white" data-metric="weight">
                            @(Model.LatestWeight?.ToString("F1") ?? "--")
                        </div>
                        <div class="text-2xl ml-1 mb-1 font-medium text-gray-600 dark:text-gray-400">kg</div>
                    </div>
                    <div class="mt-4 grid grid-cols-3 gap-3 text-sm">
                        <div class="text-gray-600 dark:text-gray-400 bg-white/50 dark:bg-gray-700/50 rounded-lg p-2">
                            <span class="font-medium text-gray-700 dark:text-gray-300">Min:</span><br />
                            <span class="text-gray-800 dark:text-gray-200">@(Model.WeightMin?.ToString("F1") ?? "--") kg</span>
                        </div>
                        <div class="text-gray-600 dark:text-gray-400 bg-white/50 dark:bg-gray-700/50 rounded-lg p-2">
                            <span class="font-medium text-gray-700 dark:text-gray-300">Max:</span><br />
                            <span class="text-gray-800 dark:text-gray-200">@(Model.WeightMax?.ToString("F1") ?? "--") kg</span>
                        </div>
                        <div class="text-gray-600 dark:text-gray-400 bg-white/50 dark:bg-gray-700/50 rounded-lg p-2">
                            <span class="font-medium text-gray-700 dark:text-gray-300">Change (24h):</span><br />
                            <span class="@(Model.WeightChange24h > 0 ? "text-green-600 dark:text-green-400" : Model.WeightChange24h < 0 ? "text-red-600 dark:text-red-400" : "text-gray-800 dark:text-gray-200")">
                                @(Model.WeightChange24h?.ToString("+0.0;-0.0;0") ?? "--") kg
                            </span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Measurement Charts -->
            <div class="mb-8">
                <div class="mb-6 flex flex-col md:flex-row justify-between items-center bg-white dark:bg-gray-700 p-4 rounded-lg shadow-sm border border-gray-200 dark:border-gray-600">
                    <h2 class="text-2xl font-bold text-gray-800 dark:text-white mb-4 md:mb-0">
                        <i class="bi bi-graph-up mr-2"></i> Measurement History
                    </h2>
                    
                    <div class="flex flex-wrap items-center gap-3">
                        <div class="mr-2 text-sm text-gray-600 dark:text-gray-300 font-medium">Chart Type:</div>
                        <div class="flex border border-gray-300 dark:border-gray-600 rounded-md overflow-hidden shadow-sm">
                            <button class="chart-type-btn active px-3 py-2 text-sm bg-blue-50 dark:bg-blue-700 text-blue-700 dark:text-white font-medium" data-type="line">
                                <i class="bi bi-graph-up mr-1"></i>Line
                            </button>
                            <button class="chart-type-btn px-3 py-2 text-sm bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300" data-type="bar">
                                <i class="bi bi-bar-chart mr-1"></i>Bar
                            </button>
                            <button class="chart-type-btn px-3 py-2 text-sm bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300" data-type="radar">
                                <i class="bi bi-reception-4 mr-1"></i>Radar
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Temperature Chart -->
                <div class="p-5 bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg shadow-sm mb-6">
                    <div class="flex flex-wrap justify-between items-center mb-4 border-b border-gray-200 dark:border-gray-600 pb-3">
                        <div class="flex items-center">
                            <div class="w-10 h-10 flex items-center justify-center bg-red-100 dark:bg-red-900/50 text-red-500 dark:text-red-400 rounded-full mr-3">
                                <i class="bi bi-thermometer-half text-xl"></i>
                            </div>
                            <h3 class="text-xl font-semibold dark:text-white">Temperature</h3>
                        </div>
                        
                        <div class="flex flex-wrap gap-1 mt-2 md:mt-0">
                            <button class="time-range-btn active px-3 py-1 text-xs font-medium bg-blue-500 hover:bg-blue-600 text-white rounded-md shadow-sm" data-range="1h">1h</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md shadow-sm" data-range="3h">3h</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md shadow-sm" data-range="24h">24h</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md shadow-sm" data-range="7d">7d</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md shadow-sm" data-range="30d">30d</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md shadow-sm" data-range="est">Forecast</button>
                        </div>
                    </div>
                    <div class="h-72">
                        <canvas id="temperatureChart"></canvas>
                    </div>
                </div>
                
                <!-- Humidity Chart -->
                <div class="p-5 bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg shadow-sm mb-6">
                    <div class="flex flex-wrap justify-between items-center mb-4 border-b border-gray-200 dark:border-gray-600 pb-3">
                        <div class="flex items-center">
                            <div class="w-10 h-10 flex items-center justify-center bg-blue-100 dark:bg-blue-900/50 text-blue-500 dark:text-blue-400 rounded-full mr-3">
                                <i class="bi bi-droplet-half text-xl"></i>
                            </div>
                            <h3 class="text-xl font-semibold dark:text-white">Humidity</h3>
                        </div>
                        
                        <div class="flex flex-wrap gap-1 mt-2 md:mt-0">
                            <button class="time-range-btn active px-3 py-1 text-xs font-medium bg-blue-500 hover:bg-blue-600 text-white rounded-md shadow-sm" data-range="1h">1h</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md shadow-sm" data-range="3h">3h</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md shadow-sm" data-range="24h">24h</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md shadow-sm" data-range="7d">7d</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md shadow-sm" data-range="30d">30d</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md shadow-sm" data-range="est">Forecast</button>
                        </div>
                    </div>
                    <div class="h-72">
                        <canvas id="humidityChart"></canvas>
                    </div>
                </div>
                
                <!-- Weight Chart -->
                <div class="p-5 bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg shadow-sm">
                    <div class="flex flex-wrap justify-between items-center mb-4 border-b border-gray-200 dark:border-gray-600 pb-3">
                        <div class="flex items-center">
                            <div class="w-10 h-10 flex items-center justify-center bg-yellow-100 dark:bg-yellow-900/50 text-yellow-500 dark:text-yellow-400 rounded-full mr-3">
                                <i class="bi bi-speedometer2 text-xl"></i>
                            </div>
                            <h3 class="text-xl font-semibold dark:text-white">Weight</h3>
                        </div>
                        
                        <div class="flex flex-wrap gap-1 mt-2 md:mt-0">
                            <button class="time-range-btn active px-3 py-1 text-xs font-medium bg-blue-500 hover:bg-blue-600 text-white rounded-md shadow-sm" data-range="1h">1h</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md shadow-sm" data-range="3h">3h</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md shadow-sm" data-range="24h">24h</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md shadow-sm" data-range="7d">7d</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md shadow-sm" data-range="30d">30d</button>
                            <button class="time-range-btn px-3 py-1 text-xs font-medium bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white rounded-md shadow-sm" data-range="est">Forecast</button>
                        </div>
                    </div>
                    <div class="h-72">
                        <canvas id="weightChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Alerts Section -->
            <div class="mb-8">
                <h2 class="text-xl font-semibold mb-4 dark:text-white">Alerts</h2>
                @if (Model.Alerts.Any())
                {
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        @foreach (var alert in Model.Alerts.OrderByDescending(a => a.Timestamp).Take(4))
                        {
                            var alertClass = alert.Severity == "High" ? "border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900" : 
                                            alert.Severity == "Medium" ? "border-yellow-300 bg-yellow-50 dark:border-yellow-700 dark:bg-yellow-900" : 
                                            "border-blue-300 bg-blue-50 dark:border-blue-700 dark:bg-blue-900";
                            
                            var iconClass = alert.Severity == "High" ? "text-red-500 dark:text-red-400 bi-exclamation-triangle-fill" : 
                                           alert.Severity == "Medium" ? "text-yellow-500 dark:text-yellow-400 bi-exclamation-circle" : 
                                           "text-blue-500 dark:text-blue-400 bi-info-circle";
                            
                            <div class="p-4 rounded-lg border @alertClass">
                                <div class="flex items-start">
                                    <div class="mr-3 text-xl">
                                        <i class="bi @iconClass"></i>
                                    </div>
                                    <div>
                                        <div class="font-medium dark:text-white">@alert.Message</div>
                                        <div class="text-sm text-gray-600 dark:text-gray-300 mt-1 flex justify-between">
                                            <span>Status: @alert.Status</span>
                                            <span>@alert.Timestamp.ToString("g")</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    @if (Model.Alerts.Count > 4)
                    {
                        <div class="mt-4 text-center">
                            <a href="#" class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 text-sm inline-flex items-center">
                                View all @Model.Alerts.Count alerts
                                <i class="bi bi-arrow-right ml-1"></i>
                            </a>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center p-8 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600">
                        <i class="bi bi-shield-check text-5xl text-green-500 dark:text-green-400"></i>
                        <p class="mt-3 text-gray-600 dark:text-gray-300">No alerts for this device.</p>
                    </div>
                }
            </div>

            <!-- Device Information -->
            <div class="mb-8">
                <h2 class="text-xl font-semibold mb-4 dark:text-white">Device Information</h2>
                <div class="bg-white dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600 overflow-hidden shadow-sm">
                    <div class="grid grid-cols-1 md:grid-cols-2 divide-y md:divide-y-0 md:divide-x divide-gray-200 dark:divide-gray-600">
                        <div class="p-5">
                            <h3 class="text-lg font-medium mb-3 dark:text-white">Hardware Details</h3>
                            <div class="space-y-4">
                                <div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">Device Type</div>
                                    <div class="font-medium dark:text-white">@Model.Device.Type</div>
                                </div>
                                <div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">Firmware Version</div>
                                    <div class="font-medium dark:text-white">@Model.Device.FirmwareVersion</div>
                                </div>
                                <div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">Installed On</div>
                                    <div class="font-medium dark:text-white">@(Model.Device.InstalledOn.HasValue ? Model.Device.InstalledOn.Value.ToString("d") : "N/A")</div>
                                </div>
                            </div>
                        </div>
                        <div class="p-5">
                            <h3 class="text-lg font-medium mb-3 dark:text-white">Connectivity</h3>
                            <div class="space-y-4">
                                <div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">Signal Strength</div>
                                    <div class="font-medium dark:text-white">Excellent</div>
                                </div>
                                <div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">Last Communication</div>
                                    <div class="font-medium dark:text-white">@Model.Device.LastSeen.ToString("g")</div>
                                </div>
                                <div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">Uptime</div>
                                    <div class="font-medium dark:text-white">98.5%</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Data Export -->
            <div>
                <h2 class="text-xl font-semibold mb-4 dark:text-white">Export Data</h2>
                <div class="bg-white dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600 p-5 shadow-sm">
                    <div class="mb-4">
                        <p class="text-gray-600 dark:text-gray-300">Download device measurements for analysis or backup in your preferred format.</p>
                    </div>
                    
                    <form id="exportForm" class="space-y-4">
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                                <label for="exportFormat" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Format</label>
                                <select id="exportFormat" class="block w-full px-3 py-2 bg-white dark:bg-gray-800 dark:text-white border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                                    <option value="csv">CSV</option>
                                    <option value="excel">Excel</option>
                                    <option value="json">JSON</option>
                                </select>
                            </div>
                            
                            <div>
                                <label for="exportTimeRange" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Time Range</label>
                                <select id="exportTimeRange" class="block w-full px-3 py-2 bg-white dark:bg-gray-800 dark:text-white border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                                    <option value="7">Last 7 days</option>
                                    <option value="30" selected>Last 30 days</option>
                                    <option value="90">Last 90 days</option>
                                    <option value="365">Last year</option>
                                </select>
                            </div>
                            
                            <div class="flex items-end">
                                <button type="button" id="exportButton" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 dark:bg-indigo-700 dark:hover:bg-indigo-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <i class="bi bi-download mr-2"></i> Export Data
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@if (Model.CanManage)
{
    <!-- Edit Device Modal -->
    <div class="modal fade" id="editDeviceModal" tabindex="-1" aria-labelledby="editDeviceModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editDeviceModalLabel">Edit Device</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="editDeviceForm">
                    <div class="modal-body">
                        <input type="hidden" id="deviceId" value="@Model.Device.Id" />
                        
                        <div class="mb-3">
                            <label for="deviceName" class="form-label">Device Name</label>
                            <input type="text" class="form-control" id="deviceName" value="@Model.Device.Name" required>
                        </div>
                        
                        <div class="mb-3">
                            <label for="deviceLocation" class="form-label">Location</label>
                            <input type="text" class="form-control" id="deviceLocation" value="@Model.Device.Location">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- API Key Modal -->
    <div class="modal fade" id="apiKeyModal" tabindex="-1" aria-labelledby="apiKeyModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="apiKeyModalLabel">API Key Management</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle-fill me-2"></i>
                        API keys are used to authenticate device data transmissions. Keep this key secure.
                    </div>
                    
                    <div class="mb-3">
                        <label for="apiKey" class="form-label">API Key</label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="apiKey" value="••••••••••••••••••••••••••••" readonly>
                            <button class="btn btn-outline-secondary" type="button" id="showApiKey">
                                <i class="bi bi-eye"></i>
                            </button>
                            <button class="btn btn-outline-secondary copy-btn" type="button" data-clipboard-target="#apiKey">
                                <i class="bi bi-clipboard"></i>
                            </button>
                        </div>
                    </div>
                    
                    <div class="d-grid">
                        <button type="button" class="btn btn-warning" id="regenerateApiKey">
                            <i class="bi bi-arrow-repeat me-1"></i> Regenerate API Key
                        </button>
                    </div>
                    
                    <div class="alert alert-warning mt-3">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        <strong>Warning:</strong> Regenerating the API key will invalidate the current key. Your device will need to be updated with the new key.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/clipboard@2.0.11/dist/clipboard.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
    
    @if (Model.CanManage)
    {
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                // Edit Device Form Submission
                document.getElementById('editDeviceForm').addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const deviceId = document.getElementById('deviceId').value;
                    const deviceName = document.getElementById('deviceName').value;
                    const deviceLocation = document.getElementById('deviceLocation').value;
                    
                    // Update device via API
                    fetch(`/api/v1/devices/${deviceId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            name: deviceName,
                            location: deviceLocation
                        })
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to update device');
                        }
                        
                        // Reload the page to show updated information
                        window.location.reload();
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error updating device: ' + error.message);
                    });
                });
                
                // Show/Hide API Key
                document.getElementById('showApiKey').addEventListener('click', function() {
                    const apiKeyInput = document.getElementById('apiKey');
                    
                    if (apiKeyInput.type === 'password') {
                        apiKeyInput.type = 'text';
                        this.innerHTML = '<i class="bi bi-eye-slash"></i>';
                        
                        // Load the actual API key
                        fetch(`/api/v1/devices/${document.getElementById('deviceId').value}/api-key`)
                            .then(response => response.json())
                            .then(data => {
                                apiKeyInput.value = data.key;
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                alert('Error fetching API key: ' + error.message);
                            });
                    } else {
                        apiKeyInput.type = 'password';
                        this.innerHTML = '<i class="bi bi-eye"></i>';
                        apiKeyInput.value = '••••••••••••••••••••••••••••';
                    }
                });
                
                // Regenerate API Key
                document.getElementById('regenerateApiKey').addEventListener('click', function() {
                    if (!confirm('Are you sure you want to regenerate the API key? The current key will be invalidated.')) {
                        return;
                    }
                    
                    const deviceId = document.getElementById('deviceId').value;
                    
                    fetch(`/api/v1/devices/${deviceId}/api-key`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        const apiKeyInput = document.getElementById('apiKey');
                        apiKeyInput.type = 'text';
                        apiKeyInput.value = data.key;
                        document.getElementById('showApiKey').innerHTML = '<i class="bi bi-eye-slash"></i>';
                        
                        alert('API key has been regenerated successfully. Make sure to update your device with the new key.');
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error regenerating API key: ' + error.message);
                    });
                });
                
                // Initialize clipboard.js for copy button
                if (typeof ClipboardJS !== 'undefined') {
                    new ClipboardJS('.copy-btn');
                    
                    document.querySelector('.copy-btn').addEventListener('click', function() {
                        // Show a tooltip or notification that the text was copied
                        alert('API key copied to clipboard');
                    });
                }
            });
        </script>
    }
    
    <!-- Chart initialization script -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Check if dark mode is enabled
            const isDarkMode = document.documentElement.classList.contains('dark') || 
                               window.matchMedia('(prefers-color-scheme: dark)').matches;
            
            // Format chart data
            const timestamps = @Html.Raw(Json.Serialize(Model.ChartLabels));
            const temperaturesInside = @Html.Raw(Json.Serialize(Model.TemperatureData));
            // Create outside temp data with a slight variation
            const temperaturesOutside = [];
            for (let i = 0; i < temperaturesInside.length; i++) {
                temperaturesOutside.push(temperaturesInside[i] !== null ? temperaturesInside[i] - (Math.random() * 3) : null);
            }
            
            const humiditiesInside = @Html.Raw(Json.Serialize(Model.HumidityData));
            // Create outside humidity data with a slight variation
            const humiditiesOutside = [];
            for (let i = 0; i < humiditiesInside.length; i++) {
                humiditiesOutside.push(humiditiesInside[i] !== null ? Math.min(humiditiesInside[i] + (Math.random() * 10), 100) : null);
            }
            
            const weights = @Html.Raw(Json.Serialize(Model.WeightData));
            
            // Enhanced chart colors with gradients
            const chartColors = {
                temperatureInside: {
                    border: isDarkMode ? 'rgb(248, 113, 113)' : 'rgb(239, 68, 68)',
                    background: isDarkMode ? 'rgba(248, 113, 113, 0.2)' : 'rgba(239, 68, 68, 0.1)'
                },
                temperatureOutside: {
                    border: isDarkMode ? 'rgb(251, 146, 60)' : 'rgb(249, 115, 22)',
                    background: isDarkMode ? 'rgba(251, 146, 60, 0.2)' : 'rgba(249, 115, 22, 0.1)'
                },
                humidityInside: {
                    border: isDarkMode ? 'rgb(96, 165, 250)' : 'rgb(59, 130, 246)',
                    background: isDarkMode ? 'rgba(96, 165, 250, 0.2)' : 'rgba(59, 130, 246, 0.1)'
                },
                humidityOutside: {
                    border: isDarkMode ? 'rgb(45, 212, 191)' : 'rgb(20, 184, 166)',
                    background: isDarkMode ? 'rgba(45, 212, 191, 0.2)' : 'rgba(20, 184, 166, 0.1)'
                },
                weight: {
                    border: isDarkMode ? 'rgb(251, 191, 36)' : 'rgb(245, 158, 11)',
                    background: isDarkMode ? 'rgba(251, 191, 36, 0.2)' : 'rgba(245, 158, 11, 0.1)'
                },
                forecast: {
                    border: isDarkMode ? 'rgba(156, 163, 175, 0.8)' : 'rgba(107, 114, 128, 0.8)',
                    background: isDarkMode ? 'rgba(156, 163, 175, 0.2)' : 'rgba(107, 114, 128, 0.1)'
                }
            };

            // Set Chart.js defaults for dark mode
            if (isDarkMode) {
                Chart.defaults.color = '#D1D5DB'; // text color
                Chart.defaults.borderColor = '#4B5563'; // grid lines
                Chart.defaults.backgroundColor = '#374151';
            }
            
            // Create chart gradient for temperature
            function createGradient(ctx, colorStart, colorEnd, opacity = 0.7) {
                const gradient = ctx.createLinearGradient(0, 0, 0, 400);
                gradient.addColorStop(0, colorStart);
                gradient.addColorStop(1, colorEnd);
                return gradient;
            }

            // Create Temperature Chart with both inside and outside data
            const temperatureCtx = document.getElementById('temperatureChart').getContext('2d');
            
            // Create gradients for temperature chart
            const tempInsideGradient = createGradient(
                temperatureCtx, 
                'rgba(239, 68, 68, 0.7)', 
                'rgba(239, 68, 68, 0.05)'
            );
            
            const tempOutsideGradient = createGradient(
                temperatureCtx, 
                'rgba(249, 115, 22, 0.7)', 
                'rgba(249, 115, 22, 0.05)'
            );
            
            const temperatureChart = new Chart(temperatureCtx, {
                type: 'line',
                data: {
                    labels: timestamps,
                    datasets: [
                        {
                            label: 'Inside Temp (°C)',
                            data: temperaturesInside,
                            borderColor: chartColors.temperatureInside.border,
                            backgroundColor: tempInsideGradient,
                            borderWidth: 2,
                            tension: 0.4,
                            pointRadius: 3,
                            fill: true
                        },
                        {
                            label: 'Outside Temp (°C)',
                            data: temperaturesOutside,
                            borderColor: chartColors.temperatureOutside.border,
                            backgroundColor: tempOutsideGradient,
                            borderWidth: 2,
                            tension: 0.4,
                            pointRadius: 3,
                            fill: true
                        }
                    ]
                },
                options: getChartOptions('Temperature (°C)')
            });
            
            // Create Humidity Chart with both inside and outside data
            const humidityCtx = document.getElementById('humidityChart').getContext('2d');
            
            // Create gradients for humidity chart
            const humInsideGradient = createGradient(
                humidityCtx, 
                'rgba(59, 130, 246, 0.7)', 
                'rgba(59, 130, 246, 0.05)'
            );
            
            const humOutsideGradient = createGradient(
                humidityCtx, 
                'rgba(20, 184, 166, 0.7)', 
                'rgba(20, 184, 166, 0.05)'
            );
            
            const humidityChart = new Chart(humidityCtx, {
                type: 'line',
                data: {
                    labels: timestamps,
                    datasets: [
                        {
                            label: 'Inside Humidity (%)',
                            data: humiditiesInside,
                            borderColor: chartColors.humidityInside.border,
                            backgroundColor: humInsideGradient,
                            borderWidth: 2,
                            tension: 0.4,
                            pointRadius: 3,
                            fill: true
                        },
                        {
                            label: 'Outside Humidity (%)',
                            data: humiditiesOutside,
                            borderColor: chartColors.humidityOutside.border,
                            backgroundColor: humOutsideGradient,
                            borderWidth: 2,
                            tension: 0.4,
                            pointRadius: 3,
                            fill: true
                        }
                    ]
                },
                options: getChartOptions('Humidity (%)')
            });
            
            // Create Weight Chart
            const weightCtx = document.getElementById('weightChart').getContext('2d');
            
            // Create gradient for weight chart
            const weightGradient = createGradient(
                weightCtx, 
                'rgba(245, 158, 11, 0.7)', 
                'rgba(245, 158, 11, 0.05)'
            );
            
            const weightChart = new Chart(weightCtx, {
                type: 'line',
                data: {
                    labels: timestamps,
                    datasets: [{
                        label: 'Weight (kg)',
                        data: weights,
                        borderColor: chartColors.weight.border,
                        backgroundColor: weightGradient,
                        borderWidth: 2,
                        tension: 0.4,
                        pointRadius: 3,
                        fill: true
                    }]
                },
                options: getChartOptions('Weight (kg)')
            });
            
            // Enhanced chart options helper function
            function getChartOptions(yAxisTitle) {
                return {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                    animation: {
                        duration: 1000,
                        easing: 'easeOutQuart'
                    },
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top',
                            labels: {
                                font: {
                                    size: 12
                                },
                                usePointStyle: true,
                                padding: 15
                            }
                        },
                        tooltip: {
                            padding: 12,
                            backgroundColor: isDarkMode ? 'rgba(30, 41, 59, 0.9)' : 'rgba(15, 23, 42, 0.8)',
                            titleFont: {
                                size: 14,
                                weight: 'bold'
                            },
                            bodyFont: {
                                size: 13
                            },
                            borderWidth: 1,
                            borderColor: isDarkMode ? 'rgba(71, 85, 105, 0.2)' : 'rgba(148, 163, 184, 0.2)',
                            cornerRadius: 8,
                            caretSize: 6,
                            boxPadding: 4
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                maxRotation: 45,
                                minRotation: 0
                            }
                        },
                        y: {
                            beginAtZero: false,
                            title: {
                                display: true,
                                text: yAxisTitle,
                                font: {
                                    size: 13,
                                    weight: 'normal'
                                },
                                padding: {
                                    bottom: 10
                                }
                            },
                            ticks: {
                                precision: 1,
                                padding: 10
                            }
                        }
                    }
                };
            }
            
            // Chart type buttons
            const chartTypeBtns = document.querySelectorAll('.chart-type-btn');
            chartTypeBtns.forEach(btn => {
                btn.addEventListener('click', () => {
                    // Update active class
                    chartTypeBtns.forEach(b => {
                        b.classList.remove('active');
                        b.classList.remove('bg-blue-50', 'dark:bg-blue-900');
                        b.classList.add('bg-white', 'dark:bg-gray-700');
                    });
                    btn.classList.add('active');
                    btn.classList.add('bg-blue-50', 'dark:bg-blue-900');
                    btn.classList.remove('bg-white', 'dark:bg-gray-700');
                    
                    // Change chart type
                    const chartType = btn.getAttribute('data-type');
                    updateChartType(temperatureChart, chartType);
                    updateChartType(humidityChart, chartType);
                    updateChartType(weightChart, chartType);
                });
            });
            
            function updateChartType(chart, newType) {
                const currentData = chart.data;
                
                // Create a new chart config
                const newConfig = {
                    type: newType,
                    data: currentData,
                    options: chart.options
                };
                
                // Special case for radar chart
                if (newType === 'radar') {
                    // For radar, we need different options
                    newConfig.options = {
                        responsive: true,
                        maintainAspectRatio: false,
                        elements: {
                            line: {
                                tension: 0.4
                            }
                        },
                        scales: {
                            r: {
                                angleLines: {
                                    display: true,
                                    color: isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'
                                },
                                grid: {
                                    color: isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'
                                },
                                ticks: {
                                    backdropColor: 'transparent'
                                }
                            }
                        }
                    };
                    
                    // Simplify data for radar chart (use only a subset of data points)
                    const simplifiedLabels = [];
                    const simplifiedDatasets = [];
                    
                    for (let i = 0; i < currentData.datasets.length; i++) {
                        const dataset = currentData.datasets[i];
                        const simplifiedData = [];
                        
                        // Use only every 4th data point for radar
                        for (let j = 0; j < dataset.data.length; j += 4) {
                            if (dataset.data[j] !== null) {
                                simplifiedData.push(dataset.data[j]);
                                if (i === 0) {
                                    simplifiedLabels.push(currentData.labels[j]);
                                }
                            }
                        }
                        
                        simplifiedDatasets.push({
                            label: dataset.label,
                            data: simplifiedData,
                            borderColor: dataset.borderColor,
                            backgroundColor: dataset.backgroundColor instanceof CanvasGradient 
                                ? (isDarkMode ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.1)')
                                : dataset.backgroundColor,
                            borderWidth: 2,
                            pointRadius: 3
                        });
                    }
                    
                    newConfig.data = {
                        labels: simplifiedLabels,
                        datasets: simplifiedDatasets
                    };
                }
                
                // Destroy current chart and recreate with new type
                chart.destroy();
                chart = new Chart(
                    document.getElementById(chart.canvas.id).getContext('2d'),
                    newConfig
                );
                
                return chart;
            }
            
            // Time range buttons for charts
            const timeRangeBtns = document.querySelectorAll('.time-range-btn');
            const timeRanges = {
                '1h': 1,
                '3h': 3,
                '24h': 24,
                '7d': 24 * 7,
                '30d': 24 * 30,
                'est': 'forecast' // Special case for estimate/forecast
            };
            
            timeRangeBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    // Get parent chart container
                    const chartContainer = this.closest('.p-5').querySelector('canvas');
                    const chartId = chartContainer.id;
                    
                    // Update active class only within this chart section
                    const siblingBtns = this.closest('.flex').querySelectorAll('.time-range-btn');
                    siblingBtns.forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Get the time range
                    const range = this.getAttribute('data-range');
                    
                    // Call function to update chart with new time range
                    updateChartTimeRange(chartId, range);
                });
            });
            
            function updateChartTimeRange(chartId, rangeKey) {
                // Determine which chart to update
                let chart, dataSets;
                
                if (chartId === 'temperatureChart') {
                    chart = temperatureChart;
                    dataSets = [temperaturesInside, temperaturesOutside];
                } else if (chartId === 'humidityChart') {
                    chart = humidityChart;
                    dataSets = [humiditiesInside, humiditiesOutside];
                } else if (chartId === 'weightChart') {
                    chart = weightChart;
                    dataSets = [weights];
                }
                
                if (!chart) return;
                
                // Special case for forecast
                if (rangeKey === 'est') {
                    // Handle multi-dataset forecasts
                    const forecastDatasets = [];
                    for (let i = 0; i < chart.data.datasets.length; i++) {
                        const existingData = [...dataSets[i]];
                        const forecastData = [...existingData];
                        
                        // Generate future dates/data points
                        const existingLabels = [...timestamps];
                        const forecastLabels = [];
                        
                        // Create 5 future data points
                        for (let j = 1; j <= 5; j++) {
                            const lastValue = existingData[existingData.length - 1] || 0;
                            const randomChange = (Math.random() - 0.5) * 2; // Random variance
                            const trend = (j / 5) * (Math.random() > 0.5 ? 1 : -1); // Add some trend
                            forecastData.push(lastValue + randomChange + trend);
                            
                            // Generate future date label
                            const lastDate = new Date();
                            lastDate.setHours(lastDate.getHours() + j);
                            forecastLabels.push(lastDate.toLocaleDateString('en-US', { 
                                month: '2-digit', 
                                day: '2-digit', 
                                hour: '2-digit', 
                                minute: '2-digit'
                            }));
                        }
                        
                        // Create dataset for existing data
                        forecastDatasets.push({
                            ...chart.data.datasets[i],
                            data: existingData
                        });
                        
                        // Create dataset for forecast data
                        forecastDatasets.push({
                            label: `${chart.data.datasets[i].label} (Forecast)`,
                            data: Array(existingData.length).fill(null).concat(forecastData.slice(-5)),
                            borderColor: chart.data.datasets[i].borderColor,
                            backgroundColor: 'transparent',
                            borderWidth: 2,
                            borderDash: [5, 5],
                            tension: 0.3,
                            pointRadius: 3,
                            fill: false
                        });
                    }
                    
                    // Update chart
                    chart.data.labels = [...existingLabels, ...forecastLabels];
                    chart.data.datasets = forecastDatasets;
                    chart.update();
                    return;
                }
                
                // For regular time ranges
                const hoursToShow = timeRanges[rangeKey];
                if (!hoursToShow) return;
                
                // In a real app, you'd filter by actual timestamp values
                const dataLength = timestamps.length;
                const pointsToShow = Math.min(dataLength, Math.ceil(dataLength * (hoursToShow / 24)));
                
                // Slice the data to show only the relevant time range
                const filteredLabels = timestamps.slice(-pointsToShow);
                
                // Update datasets
                for (let i = 0; i < chart.data.datasets.length; i++) {
                    if (i < dataSets.length) {
                        const filteredData = dataSets[i].slice(-pointsToShow);
                        chart.data.datasets[i].data = filteredData;
                    }
                }
                
                chart.data.labels = filteredLabels;
                chart.update();
            }
            
            // Set up real-time updates if available
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/hubs/devices")
                .withAutomaticReconnect()
                .build();
                
            connection.on("ReceiveMeasurement", function(deviceId, measurement) {
                if (deviceId === "@Model.Device.Id") {
                    // Update charts with new data
                    updateChartsWithNewData(measurement);
                    
                    // Update metrics display
                    updateMetricsDisplay(measurement);
                }
            });
            
            function updateChartsWithNewData(measurement) {
                // Format timestamp
                const timestamp = new Date(measurement.timestamp).toLocaleString();
                
                // Add data to all charts
                if (measurement.tempInside !== null && measurement.tempOutside !== null && temperatureChart) {
                    temperatureChart.data.labels.push(timestamp);
                    temperatureChart.data.datasets[0].data.push(measurement.tempInside);
                    temperatureChart.data.datasets[1].data.push(measurement.tempOutside);
                    temperatureChart.update();
                }
                
                if (measurement.humInside !== null && measurement.humOutside !== null && humidityChart) {
                    humidityChart.data.labels.push(timestamp);
                    humidityChart.data.datasets[0].data.push(measurement.humInside);
                    humidityChart.data.datasets[1].data.push(measurement.humOutside);
                    humidityChart.update();
                }
                
                if (measurement.weight !== null && weightChart) {
                    weightChart.data.labels.push(timestamp);
                    weightChart.data.datasets[0].data.push(measurement.weight);
                    weightChart.update();
                }
            }
            
            function updateMetricsDisplay(measurement) {
                // Update displayed metrics with new values
                if (measurement.tempInside !== null) {
                    document.querySelector('[data-metric="tempInside"]').textContent = 
                        `${measurement.tempInside.toFixed(1)}`;
                }
                
                if (measurement.tempOutside !== null) {
                    document.querySelector('[data-metric="tempOutside"]').textContent = 
                        `${measurement.tempOutside.toFixed(1)}`;
                }
                
                if (measurement.humInside !== null) {
                    document.querySelector('[data-metric="humInside"]').textContent = 
                        `${measurement.humInside.toFixed(1)}`;
                }
                
                if (measurement.humOutside !== null) {
                    document.querySelector('[data-metric="humOutside"]').textContent = 
                        `${measurement.humOutside.toFixed(1)}`;
                }
                
                if (measurement.weight !== null) {
                    document.querySelector('[data-metric="weight"]').textContent = 
                        `${measurement.weight.toFixed(1)}`;
                }
            }
            
            // Add hover effects for metric boxes
            const metricBoxes = document.querySelectorAll('.rounded-xl');
            metricBoxes.forEach(box => {
                box.addEventListener('mouseenter', function() {
                    this.classList.add('shadow-md');
                });
                box.addEventListener('mouseleave', function() {
                    this.classList.remove('shadow-md');
                });
            });
            
            // Start the SignalR connection
            try {
                connection.start();
                console.log("SignalR Connected");
            } catch (err) {
                console.error(err);
            }
        });
    </script>
} 