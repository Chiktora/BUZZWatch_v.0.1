@model BuzzWatch.Web.Models.NotificationCenterViewModel

<div class="position-relative">
    <button id="notification-button" class="notification-btn">
        <i class="bi bi-bell fs-5"></i>
        @if (Model.UnreadCount > 0)
        {
            <span class="notification-badge">
                @(Model.UnreadCount > 99 ? "99+" : Model.UnreadCount.ToString())
            </span>
        }
    </button>

    <div id="notification-dropdown" class="notification-dropdown d-none">
        <div class="py-2 px-3 bg-light border-bottom d-flex justify-content-between align-items-center">
            <h6 class="m-0 fw-semibold">Notifications</h6>
            @if (Model.UnreadCount > 0)
            {
                <form asp-controller="Notifications" asp-action="MarkAllAsRead" method="post">
                    <button type="submit" class="btn btn-link btn-sm text-decoration-none p-0 text-primary">
                        Mark all as read
                    </button>
                </form>
            }
        </div>
        
        <div class="overflow-auto" style="max-height: 360px;">
            @if (Model.RecentNotifications.Any())
            {
                <div class="list-group list-group-flush">
                    @foreach (var notification in Model.RecentNotifications)
                    {
                        <div class="list-group-item list-group-item-action @(notification.IsRead ? "" : "bg-light")">
                            <div class="d-flex">
                                @{
                                    var iconClass = notification.Type switch
                                    {
                                        NotificationType.Info => "bi bi-info-circle text-primary",
                                        NotificationType.Warning => "bi bi-exclamation-triangle text-warning",
                                        NotificationType.Alert => "bi bi-exclamation-circle text-danger",
                                        NotificationType.Success => "bi bi-check-circle text-success",
                                        _ => "bi bi-bell text-secondary"
                                    };
                                }
                                <div class="me-3 fs-4">
                                    <i class="@iconClass"></i>
                                </div>
                                <div class="flex-grow-1 min-w-0">
                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        <h6 class="mb-0 text-truncate">@notification.Title</h6>
                                        <small class="text-muted ms-2">
                                            @notification.Timestamp.ToLocalTime().ToString("HH:mm")
                                        </small>
                                    </div>
                                    <p class="mb-0 text-secondary small">
                                        @notification.Message
                                    </p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="p-4 text-center text-muted">
                    <i class="bi bi-bell-slash fs-2 mb-2"></i>
                    <p class="mb-0">No notifications yet.</p>
                </div>
            }
        </div>
        
        <div class="py-2 px-3 bg-light border-top text-center">
            <a href="@Url.Action("Index", "Notifications")" class="text-decoration-none">
                View all notifications
            </a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const notificationButton = document.getElementById('notification-button');
        const notificationDropdown = document.getElementById('notification-dropdown');
        
        if (notificationButton && notificationDropdown) {
            notificationButton.addEventListener('click', function(e) {
                e.stopPropagation();
                notificationDropdown.classList.toggle('d-none');
            });
            
            // Close dropdown when clicking outside
            document.addEventListener('click', function(e) {
                if (!notificationButton.contains(e.target) && !notificationDropdown.contains(e.target)) {
                    notificationDropdown.classList.add('d-none');
                }
            });
        }
    });
</script> 