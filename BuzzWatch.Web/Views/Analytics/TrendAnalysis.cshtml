@model BuzzWatch.Web.Models.TrendAnalysisViewModel
@{
    ViewData["Title"] = "Trend Analysis";
}

<div class="container">
    <div class="mb-4">
        <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left me-1"></i> Back to Analytics
        </a>
    </div>
    
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h4 class="mb-0">Trend Analysis: @Model.Device.Name</h4>
            <span class="badge bg-primary">@Model.MetricDisplayName</span>
        </div>
        <div class="card-body">
            <div class="row mb-4">
                <div class="col-md-8">
                    <form asp-action="TrendAnalysis" method="get" class="d-flex gap-2">
                        <input type="hidden" name="deviceId" value="@Model.Device.Id" />
                        
                        <select name="metric" class="form-select form-select-sm" onchange="this.form.submit()">
                            <option value="temperature" selected="@(Model.SelectedMetric == "temperature")">Temperature</option>
                            <option value="humidity" selected="@(Model.SelectedMetric == "humidity")">Humidity</option>
                            <option value="weight" selected="@(Model.SelectedMetric == "weight")">Weight</option>
                        </select>
                        
                        <select name="timeRange" class="form-select form-select-sm" onchange="this.form.submit()">
                            <option value="7d" selected="@(Model.SelectedTimeRange == "7d")">Last 7 Days</option>
                            <option value="30d" selected="@(Model.SelectedTimeRange == "30d")">Last 30 Days</option>
                            <option value="90d" selected="@(Model.SelectedTimeRange == "90d")">Last 90 Days</option>
                        </select>
                    </form>
                </div>
                <div class="col-md-4 text-end">
                    <a href="@Url.Action("Export", new { deviceId = Model.Device.Id, format = "csv", timeRange = Model.SelectedTimeRange })" class="btn btn-sm btn-outline-primary">
                        <i class="bi bi-download me-1"></i> Export Data
                    </a>
                </div>
            </div>
            
            @if (Model.Measurements.Any())
            {
                <div class="row">
                    <div class="col-md-8">
                        <div class="card">
                            <div class="card-body p-2">
                                <div style="height: 350px;">
                                    <canvas id="trendChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card mb-3">
                            <div class="card-header">
                                <h5 class="card-title mb-0">Statistics</h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <div class="small text-muted">Average</div>
                                    <div class="fs-3">@(Model.Average?.ToString("F2") ?? "--") @Model.MetricDisplayName.Split(' ')[1]</div>
                                </div>
                                <div class="mb-3">
                                    <div class="small text-muted">Minimum</div>
                                    <div class="fs-3">@(Model.Minimum?.ToString("F2") ?? "--") @Model.MetricDisplayName.Split(' ')[1]</div>
                                </div>
                                <div class="mb-3">
                                    <div class="small text-muted">Maximum</div>
                                    <div class="fs-3">@(Model.Maximum?.ToString("F2") ?? "--") @Model.MetricDisplayName.Split(' ')[1]</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">Trend Analysis</h5>
                            </div>
                            <div class="card-body text-center">
                                <div class="fs-1 @Model.TrendClass mb-2">
                                    <i class="bi @Model.TrendIcon"></i>
                                </div>
                                <div class="fs-4 mb-1">@Model.TrendDirection</div>
                                <p class="text-muted small">
                                    @{
                                        var explanation = Model.TrendDirection switch
                                        {
                                            "Increasing" => $"The {Model.SelectedMetric} is showing an upward trend over the selected time period.",
                                            "Decreasing" => $"The {Model.SelectedMetric} is showing a downward trend over the selected time period.",
                                            _ => $"The {Model.SelectedMetric} is relatively stable over the selected time period."
                                        };
                                    }
                                    @explanation
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="mt-4">
                    <h5>Recommendations</h5>
                    @{
                        var recommendations = new List<string>();
                        var metricName = Model.SelectedMetric;
                        
                        if (metricName == "temperature")
                        {
                            if (Model.Average > 35)
                            {
                                recommendations.Add("Average temperature is quite high. Consider checking hive ventilation.");
                            }
                            else if (Model.Average < 20)
                            {
                                recommendations.Add("Average temperature is on the lower side. Ensure the colony is strong enough to maintain heat.");
                            }
                            
                            if (Model.TrendDirection == "Increasing" && Model.Average > 30)
                            {
                                recommendations.Add("Temperature is rising to concerning levels. Monitor closely and consider adding shade or improving ventilation.");
                            }
                        }
                        else if (metricName == "humidity")
                        {
                            if (Model.Average > 70)
                            {
                                recommendations.Add("Humidity levels are high. This could lead to moisture issues in the hive. Consider improving ventilation.");
                            }
                            else if (Model.Average < 40)
                            {
                                recommendations.Add("Humidity levels are low. If this persists, consider providing a water source near the hive.");
                            }
                        }
                        else if (metricName == "weight")
                        {
                            if (Model.TrendDirection == "Decreasing" && Model.SelectedTimeRange != "7d")
                            {
                                recommendations.Add("Hive weight is decreasing over time. This could indicate the colony is consuming stored honey. Monitor food levels.");
                            }
                            else if (Model.TrendDirection == "Increasing")
                            {
                                recommendations.Add("Hive weight is increasing, which indicates good nectar collection and honey production.");
                            }
                        }
                        
                        if (!recommendations.Any())
                        {
                            recommendations.Add($"The {metricName} readings appear to be within normal ranges. Continue regular monitoring.");
                        }
                    }
                    
                    <ul class="list-group">
                        @foreach (var recommendation in recommendations)
                        {
                            <li class="list-group-item">
                                <i class="bi bi-lightbulb text-warning me-2"></i>
                                @recommendation
                            </li>
                        }
                    </ul>
                </div>
            }
            else
            {
                <div class="text-center p-5">
                    <i class="bi bi-graph-up display-1 text-secondary opacity-50"></i>
                    <p class="mt-3">No data available for the selected time range and metric.</p>
                    <p class="text-muted">Try selecting a different time range or metric, or check that your device is sending data correctly.</p>
                </div>
            }
        </div>
    </div>
    
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Device Information</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <div class="small text-muted">Name</div>
                            <div>@Model.Device.Name</div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <div class="small text-muted">Status</div>
                            <div>
                                @if (Model.Device.Status == "Online")
                                {
                                    <span class="badge bg-success">Online</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Offline</span>
                                }
                            </div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <div class="small text-muted">Location</div>
                            <div>@Model.Device.Location</div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <div class="small text-muted">Last Seen</div>
                            <div>@Model.Device.LastSeen.ToString("g")</div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <div class="small text-muted">Firmware</div>
                            <div>@Model.Device.FirmwareVersion</div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <div class="small text-muted">Type</div>
                            <div>@Model.Device.Type</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Data Summary</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="small text-muted">Total Data Points</div>
                            <div>@Model.Measurements.Count</div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="small text-muted">Time Range</div>
                            <div>
                                @{
                                    var timeRangeText = Model.SelectedTimeRange switch
                                    {
                                        "7d" => "Last 7 Days",
                                        "30d" => "Last 30 Days",
                                        "90d" => "Last 90 Days",
                                        _ => "Custom"
                                    };
                                }
                                @timeRangeText
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="small text-muted">Data Start</div>
                            <div>
                                @(Model.Measurements.Any() 
                                    ? Model.Measurements.Min(m => m.Timestamp).ToString("g") 
                                    : "No data")
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="small text-muted">Data End</div>
                            <div>
                                @(Model.Measurements.Any() 
                                    ? Model.Measurements.Max(m => m.Timestamp).ToString("g") 
                                    : "No data")
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/chart.js/chart.umd.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Only create chart if there's data
            @if (Model.Measurements.Any())
            {
                <text>
                const ctx = document.getElementById('trendChart').getContext('2d');
                
                // Format chart data
                const labels = @Html.Raw(Json.Serialize(Model.ChartLabels));
                const data = @Html.Raw(Json.Serialize(Model.MetricData));
                
                // Get color based on metric
                const metricColor = '@Model.SelectedMetric' === 'temperature' 
                    ? 'rgb(239, 68, 68)' // red
                    : '@Model.SelectedMetric' === 'humidity' 
                        ? 'rgb(59, 130, 246)' // blue
                        : 'rgb(16, 185, 129)'; // green
                        
                const metricBgColor = '@Model.SelectedMetric' === 'temperature' 
                    ? 'rgba(239, 68, 68, 0.1)' // red
                    : '@Model.SelectedMetric' === 'humidity' 
                        ? 'rgba(59, 130, 246, 0.1)' // blue
                        : 'rgba(16, 185, 129, 0.1)'; // green
                
                // Create chart
                const trendChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: '@Model.MetricDisplayName',
                            data: data,
                            borderColor: metricColor,
                            backgroundColor: metricBgColor,
                            tension: 0.4,
                            fill: true,
                            pointRadius: 0.5,
                            pointHoverRadius: 5
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: {
                                grid: {
                                    display: false
                                },
                                ticks: {
                                    maxTicksLimit: 10
                                }
                            },
                            y: {
                                beginAtZero: false,
                                title: {
                                    display: true,
                                    text: '@Model.MetricDisplayName'
                                }
                            }
                        },
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        return `${context.dataset.label}: ${context.parsed.y.toFixed(2)}`;
                                    }
                                }
                            },
                            annotation: {
                                annotations: {
                                    line1: {
                                        type: 'line',
                                        yMin: @(Model.Average ?? 0),
                                        yMax: @(Model.Average ?? 0),
                                        borderColor: 'rgba(0, 0, 0, 0.5)',
                                        borderWidth: 1,
                                        borderDash: [5, 5],
                                        label: {
                                            content: 'Average',
                                            position: 'start'
                                        }
                                    }
                                }
                            }
                        }
                    }
                });
                </text>
            }
        });
    </script>
} 