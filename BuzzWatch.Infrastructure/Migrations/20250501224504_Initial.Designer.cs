// <auto-generated />
using System;
using BuzzWatch.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BuzzWatch.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250501224504_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BuzzWatch.Domain.Devices.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("BuzzWatch.Domain.Measurements.MeasurementHeader", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("RecordedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("RecordedAt");

                    b.ToTable("Headers");
                });

            modelBuilder.Entity("BuzzWatch.Domain.Measurements.MeasurementHumIn", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ValuePct")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.ToTable("MeasurementHumIn", (string)null);
                });

            modelBuilder.Entity("BuzzWatch.Domain.Measurements.MeasurementHumOut", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ValuePct")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.ToTable("MeasurementHumOut", (string)null);
                });

            modelBuilder.Entity("BuzzWatch.Domain.Measurements.MeasurementTempIn", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ValueC")
                        .HasPrecision(4, 1)
                        .HasColumnType("decimal(4,1)");

                    b.HasKey("Id");

                    b.ToTable("MeasurementTempIn", (string)null);
                });

            modelBuilder.Entity("BuzzWatch.Domain.Measurements.MeasurementTempOut", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ValueC")
                        .HasPrecision(4, 1)
                        .HasColumnType("decimal(4,1)");

                    b.HasKey("Id");

                    b.ToTable("MeasurementTempOut", (string)null);
                });

            modelBuilder.Entity("BuzzWatch.Domain.Measurements.MeasurementWeight", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ValueKg")
                        .HasPrecision(8, 3)
                        .HasColumnType("decimal(8,3)");

                    b.HasKey("Id");

                    b.ToTable("MeasurementWeight", (string)null);
                });

            modelBuilder.Entity("BuzzWatch.Domain.Devices.Device", b =>
                {
                    b.OwnsOne("BuzzWatch.Domain.Devices.HiveLocation", "Location", b1 =>
                        {
                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");
                        });

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BuzzWatch.Domain.Measurements.MeasurementHeader", b =>
                {
                    b.HasOne("BuzzWatch.Domain.Devices.Device", null)
                        .WithMany("Measurements")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuzzWatch.Domain.Measurements.MeasurementHumIn", b =>
                {
                    b.HasOne("BuzzWatch.Domain.Measurements.MeasurementHeader", null)
                        .WithOne("HumIn")
                        .HasForeignKey("BuzzWatch.Domain.Measurements.MeasurementHumIn", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuzzWatch.Domain.Measurements.MeasurementHumOut", b =>
                {
                    b.HasOne("BuzzWatch.Domain.Measurements.MeasurementHeader", null)
                        .WithOne("HumOut")
                        .HasForeignKey("BuzzWatch.Domain.Measurements.MeasurementHumOut", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuzzWatch.Domain.Measurements.MeasurementTempIn", b =>
                {
                    b.HasOne("BuzzWatch.Domain.Measurements.MeasurementHeader", null)
                        .WithOne("TempIn")
                        .HasForeignKey("BuzzWatch.Domain.Measurements.MeasurementTempIn", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuzzWatch.Domain.Measurements.MeasurementTempOut", b =>
                {
                    b.HasOne("BuzzWatch.Domain.Measurements.MeasurementHeader", null)
                        .WithOne("TempOut")
                        .HasForeignKey("BuzzWatch.Domain.Measurements.MeasurementTempOut", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuzzWatch.Domain.Measurements.MeasurementWeight", b =>
                {
                    b.HasOne("BuzzWatch.Domain.Measurements.MeasurementHeader", null)
                        .WithOne("Weight")
                        .HasForeignKey("BuzzWatch.Domain.Measurements.MeasurementWeight", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuzzWatch.Domain.Devices.Device", b =>
                {
                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("BuzzWatch.Domain.Measurements.MeasurementHeader", b =>
                {
                    b.Navigation("HumIn");

                    b.Navigation("HumOut");

                    b.Navigation("TempIn");

                    b.Navigation("TempOut");

                    b.Navigation("Weight");
                });
#pragma warning restore 612, 618
        }
    }
}
